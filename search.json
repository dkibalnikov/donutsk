[{"path":"https://dkibalnikov.github.io/donutsk/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Kibalnikov Dmitry Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/articles/real_life_example.html","id":"real-data","dir":"Articles","previous_headings":"","what":"Real Data","title":"Real life example","text":"dealing new visualizations, ’s always important assess feasibility real-life scenarios. Pie donut charts can effectively display structure observable cases. nested donut chart can handle two-level hierarchy, displaying higher-level overview internal donut granular level external donut. key idea arrange align internal external levels. illustrate concept, use GDP data obtained World Bank using wbstats::wb_data() function. indicator NY.GDP.MKTP.PP.CD represents Purchasing Power Parity GDP current international dollars. country’s GDP associated name region, representing aforementioned two-level hierarchy. Additionally, aim showcase prominent ggplot2 features faceting color palettes, seamlessly incorporated donutsk package.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/articles/real_life_example.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Real life example","text":"insightful charts, ’s essential differentiate crucial data less significant data. Using quantiles good approach define thresholds categorizing low GDP values special category, “”: donuts necessarily require eliminating duplication, given case, prefer one GDP value per country. original dataset contain duplicates, replacing country names “” changes situation. general, suggest considering aggregation obtain unique value per hierarchy clearer outcome. next step data preparation arranging data. can done two ways: Utilize dplyr::arrange() alphabetically order values within region. Utilize donutsk::packing() distribute small values apart . second option simplifies labeling task, first option preferable comparing World GDP structures period versus period, since order countries remain unless country falls “” category. go donutsk::packing() time lot small values alongside big ones. donutsk::packing() function requires bit complicated data preparation using dplyr::nest_by() tidyr::unnest(). preparation ready, data can combined one dataset visualization.","code":"library(donutsk) #> Loading required package: ggplot2 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  GDP1 <- filter(GDP, date %in% c(2001, 2022)) |>    group_by(date) |>   mutate(country = if_else(GDP > quantile(GDP, .9), country, \"Other\")) |>    group_by(date, region, region_ISO, country) |>    summarise(GDP = sum(GDP), .groups = \"drop\")  GDP1 #> # A tibble: 54 × 5 #>     date region                region_ISO country         GDP #>    <dbl> <chr>                 <chr>      <chr>         <dbl> #>  1  2001 East Asia & Pacific   EAS        Australia   5.33e11 #>  2  2001 East Asia & Pacific   EAS        China       4.08e12 #>  3  2001 East Asia & Pacific   EAS        Indonesia   1.06e12 #>  4  2001 East Asia & Pacific   EAS        Japan       3.55e12 #>  5  2001 East Asia & Pacific   EAS        Korea, Rep. 9.34e11 #>  6  2001 East Asia & Pacific   EAS        Other       1.68e12 #>  7  2001 Europe & Central Asia ECS        France      1.69e12 #>  8  2001 Europe & Central Asia ECS        Germany     2.34e12 #>  9  2001 Europe & Central Asia ECS        Italy       1.60e12 #> 10  2001 Europe & Central Asia ECS        Other       4.37e12 #> # ℹ 44 more rows GDP2_1 <- arrange(GDP1, date, region_ISO)  GDP2_2 <- nest_by(GDP1, date) |>    mutate(data = list(packing(data, GDP, region_ISO))) |>    tidyr::unnest(cols = \"data\")  GDP2 <- bind_rows(`arrange()`= GDP2_1, `packing()`= GDP2_2, .id = \"Arrange type\")"},{"path":"https://dkibalnikov.github.io/donutsk/articles/real_life_example.html","id":"charting","dir":"Articles","previous_headings":"","what":"Charting","title":"Real life example","text":"Labeling donut segments straightforward since ’s highly possible face label overlaps, makes annotations unreadable. order overcome obstacles, rather leverage eye() accommodate labels onto chart. layout places labels controlled way, handling label length pretty well. bring clarity analysis, prefer indicate percentage regions countries using glue::glue() syntax internal pre-calculated variable .prc. ’s enough pass expression like {scales::percent(.prc)} get formatted percent. said, arrange() method given case preferable. ’s quite convenient make structure comparisons European countries, spotting Poland 2022 year additional one compared 2001. ’s also easy notice Asia captured first GDP place Europe. aforementioned insights way difficult identify packing() version. example can look bit cumbersome additional artificial level complexity - Arrange type. Real life example look follows:  another way distribute labels without overlap, leveraging tv() layout thinner parameter, builds two levels display labels. Since ’s another approach, relax quantile threshold value 0.95.  examples illustrate trade-arrange() packing() functions. arrange() function better suited year--year comparisons maintains order across years. However, packing() function allocates chart space efficiently distributing small values among larger values leads less label overlaps.","code":"ggplot(GDP2, aes(value = GDP, fill = region)) +    # Internal donat represents regions   geom_donut_int(r_int = .25, col=\"white\", linewidth=.1) +   # External donat represents countries   geom_donut_ext(aes(opacity = country), col=\"white\", linewidth=.1, show.legend = F) +   # Text annotations for internal donut   geom_text_int(aes(label = \"{scales::percent(.prc)}\", col = region),                  size=3, r = 1.25, show.legend = F) +    # Label annotations for internal donut   geom_label_ext(aes(col=region, label=paste0(country, \"-{scales::percent(.prc, .01)}\")),                   size=3, col = \"white\", layout = eye(), show.legend = F,                  label.padding=unit(0.1, \"lines\")) +    # Link label annotations to specific country GDP segment   geom_pin(aes(col = region),              size=.5, linewidth=.1, show.legend = F, cut=0, layout = eye(), r = 2) +    # Adjust colors schema with palette   scale_fill_viridis_d(option = \"mako\", begin = .1, end = .8) +   scale_color_viridis_d(option = \"mako\", begin = .1, end = .8) +   coord_radial(theta = \"y\", expand = F) +   # Splitting data to 4 subsets with different combinations Arrange type ~ Year   facet_grid(`Arrange type`~date) +   xlim(0, 5) +   theme(legend.position = \"inside\", axis.text=element_blank(),          axis.ticks=element_blank(), panel.grid=element_blank(),          legend.position.inside=c(.5, .5), legend.direction = \"horizontal\") +   labs(title = \"GDP, PPP (current international $)\") ggplot(GDP2_1, aes(value = GDP, fill = region)) +    # Internal donat represents regions   geom_donut_int(r_int = .25, col=\"white\", linewidth=.1) +   # External donat represents countries   geom_donut_ext(aes(opacity = country), col=\"white\", linewidth=.1, show.legend = F) +   # Text annotations for internal donut   geom_text_int(aes(label = \"{scales::percent(.prc)}\", col = region),                  size=3, r = 1.25, show.legend = F) +    # Label annotations for internal donut   geom_label_ext(aes(col=region, label=paste0(country, \"-{scales::percent(.prc, .01)}\")),                   size=3, col = \"white\", layout = eye(), show.legend = F) +    # Link label annotations to specific country GDP segment   geom_pin(aes(col = region),              size=.5, linewidth=.1, show.legend = F, cut=0, layout = eye(), r = 2) +    # Adjust colors schema with palette   scale_fill_viridis_d(option = \"mako\", begin = .1, end = .8) +   scale_color_viridis_d(option = \"mako\", begin = .1, end = .8) +   coord_radial(theta = \"y\", expand = F) +   # Splitting data to 4 subsets with different combinations Arrange type ~ Year   facet_grid(date~., switch = \"x\") +   xlim(0, 4.5) +   theme(legend.position = \"inside\", axis.text=element_blank(),          axis.ticks=element_blank(), panel.grid=element_blank(),          legend.position.inside=c(.5, .5), legend.direction = \"horizontal\") +   labs(title = \"GDP, PPP (current international $)\", fill=\"\") # Prepare data using more strict threshold  GDP4 <- filter(GDP, date %in% c(2001, 2022)) |>    group_by(date) |>   mutate(country = if_else(GDP > quantile(GDP, .95), country, paste0(\"Other\\n\", region_ISO))) |>    group_by(date, region, region_ISO, country) |>    summarise(GDP = sum(GDP), .groups = \"drop\")  # Prepare arranged data alphabethically  GDP5_1 <- arrange(GDP4, date, region_ISO)  # Utilize packing() for data ordering GDP5_2 <- nest_by(GDP4, date) |>    mutate(data = list(packing(data, GDP, region_ISO))) |>    tidyr::unnest(cols = \"data\")  # Combine two arrange types together GDP5 <- bind_rows(`arrange()`= GDP5_1, `packing()`= GDP5_2, .id = \"Arrange type\")  # Set layout parameters  tv_lt <- tv(scale_x = 3, scale_y = 3, thinner = T, thinner_gap = .5)  # Build donut chart  ggplot(GDP5, aes(value = GDP, fill = region)) +    geom_donut_int(r_int = .25, col=\"white\", linewidth=.1) +   geom_donut_ext(aes(opacity = country), col=\"white\", linewidth=.1, show.legend = F) +   geom_text_int(aes(label = \"{scales::percent(.prc)}\", col = region),                  size=3, r = 1.25, show.legend = F) +    geom_pin(aes(col = region), size=.5, linewidth=.1, show.legend = F, cut=.1, r = 1.9,            layout =  tv_lt) +   geom_label_ext(aes(col = region,                       label = paste(stringr::str_wrap(country, 5),\"\\n{scales::percent(.prc, .01)}\")),                   size=3, col = \"white\", show.legend = F, label.padding=unit(0.1, \"lines\"),                  lineheight = .8, layout = tv_lt) +    scale_fill_viridis_d(option = \"mako\", begin = .1, end = .8) +   scale_color_viridis_d(option = \"mako\", begin = .1, end = .8) +   coord_radial(theta = \"y\", expand = F) +   facet_grid(`Arrange type`~date) +   theme(legend.position=\"inside\", axis.text=element_blank(),          axis.ticks=element_blank(), panel.grid=element_blank(),          legend.position.inside=c(.5, .5), legend.direction = \"horizontal\") +   labs(title = \"GDP, PPP (current international $)\")"},{"path":"https://dkibalnikov.github.io/donutsk/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dmitry Kibalnikov. Author, maintainer, copyright holder.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kibalnikov D (2024). donutsk: Construct advanced donut charts. R package version 0.1.0, https://dkibalnikov.github.io/donutsk/, https://github.com/dkibalnikov/donutsk.","code":"@Manual{,   title = {donutsk: Construct advanced donut charts},   author = {Dmitry Kibalnikov},   year = {2024},   note = {R package version 0.1.0, https://dkibalnikov.github.io/donutsk/},   url = {https://github.com/dkibalnikov/donutsk}, }"},{"path":"https://dkibalnikov.github.io/donutsk/index.html","id":"donutsk-","dir":"","previous_headings":"","what":"Construct advanced donut charts","title":"Construct advanced donut charts","text":"Donutsk package allows build donut/pie charts ggplot2 layer layer, exploiting advantages polar symmetry. package designed address limitations pie charts, well-known, also capitalizing ability effectively represent hierarchical data structures. following features worth highlighted: Create pie donut charts retaining ggplot2 flexibility, leveraging faceting palettes, fine-tuning appearance layout functions help streamline displaying text labels geoms without overlapping effectively leveraging space available pie donut charts packing() function arranges data distribute small values apart set annotation functions utilizes layout functions effectively distribute labels within available space label functions supports glue::glue() convenient label construction like Total: {.sum}, .sum pre-calculated variable.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Construct advanced donut charts","text":"can install development version donutsk GitHub : CRAN installation:","code":"# install.packages(\"devtools\") devtools::install_github(\"dkibalnikov/donutsk\") install.packages(\"donutsk\")"},{"path":"https://dkibalnikov.github.io/donutsk/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Construct advanced donut charts","text":"Basic example:","code":"library(donutsk) #> Loading required package: ggplot2  # Create an example data set n <- 40 set.seed(2021) df <- dplyr::tibble(  lvl1 = sample(LETTERS[1:5], n, TRUE),  lvl2 = sample(LETTERS[6:24], n, TRUE),  value = sample(1:20, n, TRUE),  highlight_ext = sample(c(FALSE,TRUE), n, TRUE, c(.9, .1))) |>  dplyr::mutate(highlight_int = dplyr::if_else(lvl1 == \"A\",TRUE,FALSE))  # Doubled donut with advanced labeling  dplyr::group_by(df, lvl1, lvl2, highlight_ext, highlight_int) |>   dplyr::summarise(value = sum(value), .groups = \"drop\") |>   # Pack values effectively    packing(value, lvl1) |>    ggplot(aes(value = value, fill = lvl1)) +   # The donutsk visualization functions   geom_donut_int(aes(highlight = highlight_int), alpha=.5, r_int = .25) +   geom_label_int(aes(label = \"Sum {fill}:\\n{.sum} ({scales::percent(.prc)})\"),                  alpha = .6, col = \"white\", r=1.2) +   geom_donut_ext(aes(opacity = lvl2, highlight = highlight_ext)) +   geom_label_ext(aes(label = paste0(lvl2, \": {scales::percent(.prc_grp)}\")),                  show.legend = FALSE, col=\"white\",                   layout = tv(thinner = TRUE)) +   geom_pin(size=.5, linewidth=.1, show.legend = FALSE, cut = .25,            layout = tv(thinner = TRUE)) +   # Additional appearance settings   scale_fill_viridis_d(option = \"inferno\", begin = .1, end = .7) +   theme_void() +    theme(legend.position = \"none\")  +    coord_polar(theta = \"y\")"},{"path":"https://dkibalnikov.github.io/donutsk/index.html","id":"alternatives","dir":"","previous_headings":"","what":"Alternatives","title":"Construct advanced donut charts","text":"list packages can considered alternatives: sunburstR: Easily create interactive d3.js sequence sunburst charts R, originally modeled example Kerry Rodden. Additionally, sunburstR provides another version using d2b Kevin Warne. tastypie: Build pie charts nice templates. webr: Check PieDonut() function. ggpubr: ‘ggpubr’ package provides easy--use functions creating customizing ‘ggplot2’-based publication-ready plots. Check ggpubr::ggpie() details.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/index.html","id":"considerations","dir":"","previous_headings":"","what":"Considerations","title":"Construct advanced donut charts","text":"following list ideas considered kind roadmap: Integrate round annotations geomtextpath hood. Expand list layouts sophisticated algorithms Integrate pattern aesthetics ggpattern Calculate precise square value highlighted segments adjust size","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/GDP.html","id":null,"dir":"Reference","previous_headings":"","what":"The World Bank GDP, PPP (current international $) — GDP","title":"The World Bank GDP, PPP (current international $) — GDP","text":"pre-processed subset GDP data World Bank GDP, PPP means gross domestic product based purchasing power parity current international $ means actual (adjusted inflation) US dollars","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/GDP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The World Bank GDP, PPP (current international $) — GDP","text":"","code":"GDP"},{"path":[]},{"path":"https://dkibalnikov.github.io/donutsk/reference/GDP.html","id":"gdp","dir":"Reference","previous_headings":"","what":"GDP","title":"The World Bank GDP, PPP (current international $) — GDP","text":"data frame 6,004 rows 5 columns: date Year country Country name region Region hierarchy region_ISO 3 letter ISO region codes GDP GDP, PPP (current international $)","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/GDP.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The World Bank GDP, PPP (current international $) — GDP","text":"https://data.worldbank.org/indicator/NY.GDP.MKTP.PP.CD","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pie or donut chart — donut_geom","title":"Create pie or donut chart — donut_geom","text":"Create pie donut charts retaining ggplot flexibility, leveraging faceting palettes, fine-tuning appearance function geom_donut_int() creates visually internal donut layer aggregation passed values function geom_donut_ext() creates visually external donut layer passed values geom_donut_int0() geom_donut_ext() generic geoms supporting highlight feature","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pie or donut chart — donut_geom","text":"","code":"geom_donut_int0(   mapping = NULL,   data = NULL,   stat = \"donut_int\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   r_int = 0,   r_ext = 1,   hl_shift = 0.1,   ... )  geom_donut_int(..., hl_col = \"firebrick\")  geom_donut_ext0(   mapping = NULL,   data = NULL,   stat = \"donut_ext\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   r_int = 1.5,   r_ext = 2,   hl_shift = 0.1,   ... )  geom_donut_ext(..., hl_col = \"firebrick\")"},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_geom.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create pie or donut chart — donut_geom","text":"object class StatDonutInt (inherits Stat, ggproto, gg) length 4. object class StatDonutIntHl (inherits Stat, ggproto, gg) length 4. object class StatDonutExt (inherits Stat, ggproto, gg) length 4. object class StatDonutExtHl (inherits Stat, ggproto, gg) length 4.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pie or donut chart — donut_geom","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). r_int Internal donut radius r_ext External pie donut radius hl_shift Sets spacing show highlighted segments ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. hl_col Sets color highlighted segments. possible use simultaneously hl_col generic colour","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pie or donut chart — donut_geom","text":"None","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_geom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create pie or donut chart — donut_geom","text":"two additional aesthetics possible use: highlight - optional aesthetic expects logical (TRUE/FALSE) variable order highlight particular donut segments opacity - operates pretty much alpha ensure contrast colors removes legend. alpha set opacity affect chart","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_geom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create pie or donut chart — donut_geom","text":"","code":"# Create an example set.seed(1605) n <- 20 df <- dplyr::tibble(   lvl1 = sample(LETTERS[1:5], n, TRUE),   lvl2 = sample(LETTERS[6:24], n, TRUE),   value = sample(1:20, n, TRUE),   highlight_ext = sample(c(FALSE,TRUE), n, TRUE, c(.7, .3))) |>   dplyr::mutate(highlight_int = ifelse(lvl1 == \"A\", TRUE, FALSE))  # Create a simple pie chart ggplot(df, aes(value = value, fill=lvl1)) +   geom_donut_int(alpha=.6) +   coord_polar(theta = \"y\")   # Create a simple donut chart that can handle more granular data # and highlight specific segments ggplot(df, aes(value = value, fill=lvl2, highlight=highlight_ext)) +   geom_donut_int(r_int=.5, alpha=.6, linewidth=.2) +   coord_polar(theta = \"y\") +   xlim(0, 1.5)   # Perform data preparation tasks with `packing()` # and apply specific color packing(df, value) |>   ggplot(aes(value = value, fill=lvl2, highlight=highlight_ext)) +   geom_donut_int(r_int=.5, alpha=.6, linewidth=.2, col = \"gray20\") +   coord_polar(theta = \"y\") +   xlim(0, 1.5)   # Built combined donut chart with interanl and external layers dplyr::bind_rows( # arrange by value `arrange()` = dplyr::arrange(df, lvl1, lvl2, value), # pack values for better space management `packing()` = packing(df, value, lvl1), .id = \"prep_type\") |>  ggplot(aes(value = value, fill=lvl1)) +  geom_donut_int(aes(highlight=highlight_int), alpha=.6) +  geom_donut_ext(aes(opacity=lvl2, highlight=highlight_int)) +  # apply facets  facet_grid(~prep_type) +  # style chart with palette and theme  scale_fill_viridis_d(option = \"inferno\", begin = .1, end = .7) +  theme_void() +  coord_polar(theta = \"y\") +  xlim(0, 2.5)"},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pie or donut label and text annotations — donut_label","title":"Create pie or donut label and text annotations — donut_label","text":"set annotation functions utilizes layout functions effectively distribute labels within available space Annotations streamlined leveraging pre-calculated special variables .sum, .mean, .n (see Details). function geom_label_int() creates geom_label-like internal donut layer aggregation passed values function geom_text_int() creates geom_text-like internal donut layer aggregation passed values function geom_label_ext() creates geom_label-like external donut layer passed values function geom_text_ext() creates geom_text-like external donut layer passed values","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pie or donut label and text annotations — donut_label","text":"","code":"geom_label_int(   mapping = NULL,   data = NULL,   stat = \"label_int\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   r = 1,   ... )  geom_text_int(   mapping = NULL,   data = NULL,   stat = \"text_int\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   r = 1,   ... )  geom_label_ext(   mapping = NULL,   data = NULL,   stat = \"label_ext\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   layout = circle(),   ... )  geom_text_ext(   mapping = NULL,   data = NULL,   stat = \"text_ext\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   layout = circle(),   ... )"},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_label.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create pie or donut label and text annotations — donut_label","text":"object class StatLabelInt (inherits Stat, ggproto, gg) length 3. object class StatTextInt (inherits Stat, ggproto, gg) length 3. object class StatLabelExt (inherits Stat, ggproto, gg) length 3. object class StatTextExt (inherits Stat, ggproto, gg) length 3.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pie or donut label and text annotations — donut_label","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string, result call position adjustment function. jointly specified nudge_x nudge_y. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). r Sets radius place label text internal donut ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. layout layout function effectively display text labels","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pie or donut label and text annotations — donut_label","text":"None","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create pie or donut label and text annotations — donut_label","text":"label functions supports glue::glue() convenient label construction like Total: {.sum}, .sum pre-calculated variable. can still use glue::glue() paste() functions pass data.frame fields label construction. addition generic aesthetics like color, fill, alpha, etc., following list pre-calculated variables available geom_label_int() geom_text_int(): .sum: Summation value field .mean: Mean value field .median: Median value field .n: Observation count value field .prc: Percentage value field geom_label_ext() geom_text_ext(), suitable external donut labels, following list pre-calculated variables available: .prc: Percentage value field entire multiplicity .prc_grp: Percentage value field group defined fill","code":""},{"path":[]},{"path":"https://dkibalnikov.github.io/donutsk/reference/donut_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create pie or donut label and text annotations — donut_label","text":"","code":"# Create an example data set n <- 30 set.seed(2021) df <- dplyr::tibble(   lvl1 = sample(LETTERS[1:5], n, TRUE),   lvl2 = sample(LETTERS[6:24], n, TRUE),   value = sample(1:20, n, TRUE),   highlight_ext = sample(c(FALSE,TRUE), n, TRUE, c(.9, .1))) |>  dplyr::mutate(highlight_int = dplyr::if_else(lvl1 == \"A\", TRUE, FALSE))  # Starting plot with doubled donuts and annotations for internal one p <- dplyr::group_by(df, lvl1, lvl2, highlight_ext, highlight_int) |>  dplyr::summarise(value = sum(value), .groups = \"drop\") |>  packing(value, lvl1) |>  ggplot(aes(value = value, fill = lvl1)) +  geom_donut_int(aes(highlight = highlight_int), alpha=.5, r_int=.25) +  geom_text_int(lineheight = .8, r=1.2, show.legend = FALSE,   aes(label = \"Sum {fill}:\\n{.sum}-{scales::percent(.prc)}\", col=lvl1)) +  geom_donut_ext(aes(opacity = lvl2, highlight = highlight_ext)) +  scale_fill_viridis_d(option = \"inferno\", begin = .1, end = .7) +  scale_color_viridis_d(option = \"inferno\", begin = .1, end = .7) +  guides(alpha=guide_legend(ncol = 2), fill=guide_legend(ncol = 2)) +  theme_void() +  theme(legend.position = \"inside\", legend.position.inside = c(0.1, 0.9))  p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = FALSE)   # Add labels to external donut as percent inside group p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = FALSE) +  geom_label_ext(aes(label=paste0(lvl2, \": {scales::percent(.prc_grp)}\")),                 show.legend = FALSE, size=3, col=\"white\")   # Leverage ggplot2 feature for labels p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = TRUE) +  geom_label_ext(aes(label=paste0(lvl2, \": {scales::percent(.prc)}\")),                 show.legend = FALSE, size=3, col=\"white\", angle=90,                 layout = circle())   # Leverage another layout p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = FALSE) +  geom_label_ext(aes(label=paste0(lvl2, \": {scales::percent(.prc_grp)}\")),                 show.legend = FALSE, size=3, col=\"white\",                 layout = tv(thinner = TRUE, thinner_gap = 0.15))"},{"path":"https://dkibalnikov.github.io/donutsk/reference/donutsk-package.html","id":null,"dir":"Reference","previous_headings":"","what":"donutsk: Construct advanced donut charts — donutsk-package","title":"donutsk: Construct advanced donut charts — donutsk-package","text":"Build donut/pie charts 'ggplot2' layer layer, exploiting advantages polar symmetry. Leverage layouts distribute labels effectively. Connect labels donut segments using pins. Streamline annotation highlighting.","code":""},{"path":[]},{"path":"https://dkibalnikov.github.io/donutsk/reference/donutsk-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"donutsk: Construct advanced donut charts — donutsk-package","text":"Maintainer: Dmitry Kibalnikov d.kibalnikov@gmail.com [copyright holder]","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/layouts.html","id":null,"dir":"Reference","previous_headings":"","what":"The set of layout functions is designed to effectively display text and labels — layouts","title":"The set of layout functions is designed to effectively display text and labels — layouts","text":"layout functions help streamline displaying text labels geoms without overlapping effectively leveraging space available pie donut charts tv() - function builds layout resembled old-fashioned TV screen petal() - function builds layout resembled flower petals circle() - function builds circle layout eye() - function builds two-sided layout","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/layouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The set of layout functions is designed to effectively display text and labels — layouts","text":"","code":"tv(   scale_x = 1.5,   scale_y = 1.5,   bend_x = 1,   bend_y = 1,   thinner = FALSE,   thinner_gap = 0.1 )  petal(   rotate = 0,   n = 4,   scale = 2.5,   bend = 0.3,   thinner = FALSE,   thinner_gap = 0.1 )  circle(r = 2.5, thinner = FALSE, thinner_gap = 0.1)  eye(scale_x = 2, bend_x = 1, alpha = 90, clove = 0.5)"},{"path":"https://dkibalnikov.github.io/donutsk/reference/layouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The set of layout functions is designed to effectively display text and labels — layouts","text":"scale_x Scales layout horizontal perspective scale_y Scales layout vertical perspective bend_x Adjusts bend level horizontal perspective bend_y Adjusts bend level vertical perspective thinner Distributes text label elements across two different levels thinner_gap Sets spacing thinner levels rotate Rotates layout clockwise n Sets number petals layout scale Scales layout bend Manages bending level r Sets radius layout circle alpha Defines angle distribution horizontal perspective. Pick value degree interval (0, 180) clove Determines distribution proportion left right-hand parts. Default value 0.5. ahould numeric value interval (0, 1) e.g. 0.4 denotes 40% cases right hand 60% cases left hand","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/layouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The set of layout functions is designed to effectively display text and labels — layouts","text":"Layout functions return layout function .e. function takes vector angles returns numeric radius vector giving position input value. Layout functions designed used layout argument donutsk functions.","code":""},{"path":[]},{"path":"https://dkibalnikov.github.io/donutsk/reference/layouts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The set of layout functions is designed to effectively display text and labels — layouts","text":"","code":"# Render multiple layouts simultaneously list(petal_2n = petal(n = 2),      petal_3n = petal(n = 3, rotate = 180),      petal_4n = petal(n = 4),      tv_base = tv(),      tv_ext = tv(bend_x = 0, bend_y = 0, thinner = TRUE)) |>   lapply(function(x){     rlang::exec(x, 1:300/300) |>       dplyr::tibble(r = _) |>       dplyr::mutate(theta = 1:300/300)   }) |>   dplyr::bind_rows(.id = \"layouts\") |>   ggplot(aes(x=r, y=theta, col = layouts)) +   geom_point(alpha = .3) +   coord_polar(theta = \"y\") +   xlim(0, 3.5)   # The eye() layout generates table as an output n <- 20 theta <- 1:n/n  dplyr::tibble(   theta = theta,   lbl = paste0(\"sample: \", sample(LETTERS, n, TRUE))   ) |>  dplyr::bind_cols(lt = eye()(theta)) |>  ggplot(aes(x=x, y=y)) +  geom_point(aes(x=1, y=theta)) +  geom_point() +  geom_segment(aes(x=1, xend=x, y=theta, yend=y), linewidth=.2) +  geom_label(aes(label=lbl, hjust=dplyr::if_else(theta > 0.5, 1, 0)),   nudge_x =.2) +  coord_polar(theta = \"y\") +  xlim(0, 5) +  ylim(0, 1)"},{"path":"https://dkibalnikov.github.io/donutsk/reference/packing.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange data to distribute small values — packing","title":"Arrange data to distribute small values — packing","text":"Arrange data distribute small values apart ","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/packing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange data to distribute small values — packing","text":"","code":"packing(.data, value, level = NULL)"},{"path":"https://dkibalnikov.github.io/donutsk/reference/packing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange data to distribute small values — packing","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). value .data field contains values distribute level .data grouping field distribution","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/packing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange data to distribute small values — packing","text":"object type .data.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/packing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange data to distribute small values — packing","text":"","code":"# Create an example n <- 20 df <- dplyr::tibble(  lvl1 = sample(LETTERS[1:5], n, TRUE),  lvl2 = sample(LETTERS[6:24], n, TRUE),  value = sample(1:20, n, TRUE)  )  # Arrange all values packing(df, value) #> # A tibble: 20 × 3 #>    lvl1  lvl2  value #>    <chr> <chr> <int> #>  1 E     I         1 #>  2 E     K        20 #>  3 C     X         3 #>  4 C     V        20 #>  5 E     H         6 #>  6 A     X        18 #>  7 D     M         7 #>  8 E     P        18 #>  9 E     K         8 #> 10 E     X        16 #> 11 E     N         8 #> 12 C     V        16 #> 13 E     Q         9 #> 14 E     L        12 #> 15 C     J         9 #> 16 C     J        12 #> 17 C     R        10 #> 18 A     H        12 #> 19 E     K        11 #> 20 D     L        11  # Arrange values within values packing(df, value, lvl1) #> # A tibble: 20 × 3 #>    lvl1  lvl2  value #>    <chr> <chr> <int> #>  1 D     M         7 #>  2 D     L        11 #>  3 E     I         1 #>  4 E     K        20 #>  5 E     H         6 #>  6 E     P        18 #>  7 E     K         8 #>  8 E     X        16 #>  9 E     N         8 #> 10 E     L        12 #> 11 E     Q         9 #> 12 E     K        11 #> 13 A     H        12 #> 14 A     X        18 #> 15 C     X         3 #> 16 C     V        20 #> 17 C     J         9 #> 18 C     V        16 #> 19 C     R        10 #> 20 C     J        12"},{"path":"https://dkibalnikov.github.io/donutsk/reference/pins.html","id":null,"dir":"Reference","previous_headings":"","what":"Connecting labels with donut segments — pins","title":"Connecting labels with donut segments — pins","text":"set functions served connect text labels donut segments geom_pin_line() - builds curved line linl label donut segment geom_pin_head() - builds stylish point heads pins geom_pin() - handy wrapper geom_pin_line() geom_pin_head()","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/pins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting labels with donut segments — pins","text":"","code":"geom_pin_line(   mapping = NULL,   data = NULL,   stat = \"pin\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   r = 1.5,   cut = 0.1,   layout = circle(),   ... )  geom_pin_head(   mapping = NULL,   data = NULL,   stat = \"point\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   r = 1.5,   cut = 0.1,   layout = circle(),   ... )  geom_pin(..., head = TRUE)"},{"path":"https://dkibalnikov.github.io/donutsk/reference/pins.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Connecting labels with donut segments — pins","text":"object class StatPinLine (inherits Stat, ggproto, gg) length 3. object class StatPinHead (inherits Stat, ggproto, gg) length 3.","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/pins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connecting labels with donut segments — pins","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). r radius donut placed cut Sets additional two-sided gap pins layout layout function effectively display text labels. Obviously better geom_label_ext geom_text_ext ... Parameters passed geom_pin_line() geom_pin_head() head Boolean - defines whether add pin head","code":""},{"path":"https://dkibalnikov.github.io/donutsk/reference/pins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connecting labels with donut segments — pins","text":"None","code":""},{"path":[]},{"path":"https://dkibalnikov.github.io/donutsk/reference/pins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connecting labels with donut segments — pins","text":"","code":"n <- 30 set.seed(2021) df <- dplyr::tibble(   lvl1 = sample(LETTERS[1:5], n, TRUE),   lvl2 = sample(LETTERS[6:24], n, TRUE),   value = sample(1:20, n, TRUE),   highlight_ext = sample(c(FALSE,TRUE), n, TRUE, c(.9, .1))) |>   dplyr::mutate(highlight_int = dplyr::if_else(lvl1 == \"A\", TRUE, FALSE))  # Starting plot with doubled donuts and annotations for internal one p <- dplyr::group_by(df, lvl1, lvl2, highlight_ext, highlight_int) |>   dplyr::summarise(value = sum(value), .groups = \"drop\") |>   packing(value, lvl1) |>   ggplot(aes(value = value, fill = lvl1)) +   geom_donut_int(aes(highlight = highlight_int), alpha=.5, r_int = .25) +   geom_label_int(aes(label = \"Sum {fill}:\\n{.sum}-{scales::percent(.prc)}\"),                  alpha = .6, col = \"white\", size = 3, r=1.2) +   geom_donut_ext(aes(opacity = lvl2, highlight = highlight_ext)) +   scale_fill_viridis_d(option = \"inferno\", begin = .1, end = .7) +   guides(alpha = guide_legend(ncol = 2), fill = guide_legend(ncol = 2)) +   theme_void() +   theme(legend.position = \"none\")  p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = FALSE)   # Add labels to external donut as percent inside group p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = FALSE) +   geom_label_ext(aes(label = paste0(lvl2, \": {scales::percent(.prc_grp)}\")),                  show.legend = FALSE, size=3, col=\"white\") +   geom_pin(size = .5, linewidth=.1, show.legend = FALSE, cut = .2)   # Leverage tv() layout p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = FALSE) +   geom_label_ext(aes(label = paste0(lvl2, \":{scales::percent(.prc_grp)}\")),                  show.legend = FALSE, size=3, col=\"white\",                  layout = tv(thinner = TRUE, thinner_gap = .15)) +   geom_pin(size = .5, linewidth=.1, show.legend = FALSE, cut = .2,            layout = tv(thinner = TRUE, thinner_gap = .15))   # Leverage another layout p + coord_radial(theta = \"y\", expand = FALSE, rotate_angle = FALSE) +   geom_label_ext(aes(label = paste0(lvl2, \": {scales::percent(.prc_grp)}\")),                  show.legend = FALSE, size=3, col=\"white\", layout = eye()) +   geom_pin(size = .5, linewidth=.1, show.legend = FALSE, layout = eye())"},{"path":"https://dkibalnikov.github.io/donutsk/news/index.html","id":"donutsk-010","dir":"Changelog","previous_headings":"","what":"donutsk 0.1.0","title":"donutsk 0.1.0","text":"Initial CRAN submission packing() implemented tests required layouts implemented distribute annotations appropriately geom_donut - functions plot donut/pie charts donut_label - annotate donut/pie pins implemented connecting annotations donut/pie segments","code":""}]
